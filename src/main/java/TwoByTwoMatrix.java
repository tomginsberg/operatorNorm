import javax.annotation.Nonnull;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */



public class TwoByTwoMatrix implements Comparable<TwoByTwoMatrix>{

    public static void main(String[] args){
        new TwoByTwoMatrix(1,2,3,4).multiply(new Vector(2,3));
    }

    private final List<Double> elements;

    public TwoByTwoMatrix(double a, double b, double c, double d){
        //Create the two by two matrix
        // |  a  b  |
        // |  c  d  |
        this.elements = new ArrayList<>(Arrays.asList(a,b,c,d));
    }

    public TwoByTwoMatrix(List<Double> elements){
        //Create the two by two matrix
        // |  a  b  |
        // |  c  d  |
        this.elements = new ArrayList<>(elements);
    }

    /**
     * @param theta
     *
     * creates the clockwise rotation matrix for an angle theta
     */
    public TwoByTwoMatrix (double theta){
        this.elements = new ArrayList<>(Arrays.asList(Math.cos(theta), -Math.sin(theta), Math.sin(theta), Math.cos(theta)));
    }

    public double getElement(int row, int column){
        return elements.get( (2 * row -2) + (column-1) );
    }

    public TwoByTwoMatrix add(TwoByTwoMatrix other){
        List<Double> elms;
        int bound = this.elements.size();
        elms = IntStream.range(0, bound)
                .mapToObj(i -> this.elements.get(i) + other.elements.get(i))
                .collect(Collectors.toList());
        return new TwoByTwoMatrix(elms);
    }

    public Vector multiply(Vector multiplier){
        List<Double> elms = new ArrayList<>();
        elms.add(this.elements.get(0) * multiplier.x() + this.elements.get(1) * multiplier.y());
        elms.add(this.elements.get(2) * multiplier.x() + this.elements.get(3) * multiplier.y());
        return new Vector(elms);
    }

    public String toString(){
        return "| " + Double.toString(this.elements.get(0)) + " " +
                Double.toString(this.elements.get(1)) + " |\n" + "| " +
                Double.toString(this.elements.get(2)) + " " +
                Double.toString(this.elements.get(3)) + " |";
    }

    public double norm(){

        double da = 0.01;

        TwoByTwoMatrix rotMatrix = new TwoByTwoMatrix(da);
        Vector vIn = new Vector(1,0);
        Vector vOut = this.multiply(vIn);
        double normLast;
        double normCurrent;


        normLast = vOut.magSquared();
        vIn = rotMatrix.multiply(vIn);
        vOut = this.multiply(vIn);
        normCurrent = vOut.magSquared();
        if (normCurrent < normLast){
            rotMatrix = new TwoByTwoMatrix(-da);
            normLast = vOut.magSquared();
            vIn = rotMatrix.multiply(vIn);
            vOut = this.multiply(vIn);
            normCurrent = vOut.magSquared();
        }


        while(normLast > normCurrent) {
            normLast = vOut.magSquared();
            vIn = rotMatrix.multiply(vIn);
            vOut = this.multiply(vIn);
            normCurrent = vOut.magSquared();
            System.out.printf("Current: %.2f, Previous: %.2f", normCurrent, normLast);
        }

        return Math.round(Math.sqrt(normLast)*100)/100.0;
    }

    @Override
    public int compareTo(@Nonnull TwoByTwoMatrix other){
        double difference = this.norm()-other.norm();
        if ( difference > 0 ){
            return 1;
        }else if (difference < 0){
            return -1;
        }else return 0;

    }

    @Override
    public boolean equals(Object other){
        if (other instanceof TwoByTwoMatrix){
            return this.norm() == ((TwoByTwoMatrix) other).norm();
        }return false;
    }


}

